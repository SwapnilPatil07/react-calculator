{"version":3,"sources":["Containers/Calculator/Calculator.module.css","Components/Display/Display.module.css","Components/Button/Button.js","Components/Display/Display.js","Logic/Calculate.js","Logic/Operate.js","Containers/Calculator/Calculator.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","button","props","className","classes","onClick","click","name","display","Display","value","calculate","value1","value2","operator","result","number1","Number","number2","parseFloat","console","log","Math","round","toFixed","toExponential","toString","operate","calcObj","operation","op","isFirstNumber","typeOfClick","initalState","Calcualtor","state","layout","type","class","Sign","Operation","Zero","colspan","params","onButtonClick","rowId","colId","isOperator","cellValue","setState","length","includes","Fragment","Table","colSpan","this","map","row","key","cell","Td","Button","join","Component","App","Calculator","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4b531f22.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Table\":\"Calculator_Table__2QPlX\",\"Td\":\"Calculator_Td__3-yHW\",\"Sign\":\"Calculator_Sign__3S2Fq\",\"Operation\":\"Calculator_Operation__3_Pde\",\"Number\":\"Calculator_Number__V6VHS\",\"Zero\":\"Calculator_Zero__9kCXC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Display\":\"Display_Display__1Zj94\"};","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst button = (props) => {\r\n    return (\r\n        <button className={props.classes}\r\n            onClick={props.click}\r\n            >{props.name}</button>\r\n    )\r\n}\r\n\r\nbutton.propTypes = {\r\n    name: PropTypes.string.isRequired,\r\n    classes: PropTypes.string.isRequired,\r\n    click: PropTypes.func.isRequired\r\n};\r\n\r\nexport default button;","import React from 'react';\r\nimport classes from './Display.module.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst display = (props) => {\r\n    return (\r\n        <span className={classes.Display} >{props.value}</span>\r\n    )\r\n}\r\n\r\ndisplay.propTypes = {\r\n    value: PropTypes.string.isRequired\r\n};\r\n\r\nexport default display;","const calculate = (value1, value2, operator) => {\r\n    let result = 0;\r\n    const number1 = Number(value1);\r\n    const number2 = Number(value2);\r\n    switch(operator){            \r\n        case 'multi' :\r\n            result = number1 * number2;\r\n            break;\r\n        case 'add':\r\n            result = number1 + number2;\r\n            break;    \r\n        case 'divide':\r\n            if(number1 === 0 || number2 === 0)\r\n                return 'Error'\r\n             result = number1 / number2;    \r\n            break;  \r\n        case 'minus':\r\n             result = number1 - number2;   \r\n             break;\r\n        case 'percent':\r\n             result = number1 / 100;\r\n             break;\r\n        case 'sign':\r\n             result = parseFloat(number1) * -1;\r\n             break;                 \r\n        default:\r\n            console.log('Operator not found ' + operator);        \r\n    }\r\n\r\n    \r\n    if(Math.round(result) !== result) {            \r\n        result = result.toFixed(2);\r\n    }\r\n    \r\n    if(result >= 999999999999999 && result !== 'Error' ){\r\n        result = result.toExponential(1);\r\n    }\r\n    \r\n    return result.toString();\r\n}\r\n\r\nexport default calculate;","import calculate from './Calculate';\r\n\r\nconst operate = (calcObj, operation) => {\r\n    let result = 0;\r\n    switch(operation){\r\n        case 'result':            \r\n            result = calculate(calcObj.value1, calcObj.value2, calcObj.op);\r\n            return { ...calcObj, display: result, value1: result, isFirstNumber: false, typeOfClick: 'op'};\r\n        case 'clear':\r\n            return { value1: '', value2: '', op: '', display: '', isFirstNumber: true};\r\n        case 'sign': \r\n            result = calculate(calcObj.display, 0, operation);\r\n            return calcObj.isFirstNumber ? { ...calcObj, value1: result, display: result, typeOfClick: 'number' } : { ...calcObj, value2: result, display: result, typeOfClick: 'op' };\r\n        case 'multi':\r\n        case 'add': \r\n        case 'minus':\r\n        case 'divide':\r\n            result = calculate( calcObj.value1, calcObj.value2, operation );\r\n            return { ...calcObj, display: result, value1: result, isFirstNumber: false, op: operation, typeOfClick: 'op'};\r\n        case 'percent':\r\n            result = calculate(calcObj.display, 0, operation);\r\n            return calcObj.isFirstNumber ? { ...calcObj, value1: result, display: result, typeOfClick: 'number'} : { ...calcObj, value2: result, display: result, typeOfClick: 'number' };\r\n        default:\r\n            console.log('Operation not found ' + operation);    \r\n    }\r\n}\r\n\r\nexport default operate;","import React, { Component } from 'react';\r\nimport Button from '../../Components/Button/Button';\r\nimport Display from '../../Components/Display/Display';\r\nimport classes from './Calculator.module.css';\r\nimport operate from '../../Logic/Operate';\r\n\r\nconst initalState = {\r\n    value1: '',  // First number \r\n    value2: '', // Second number\r\n    op: '', // Operator \r\n    display: '', // Number to display\r\n    isFirstNumber: true, // Click count to find which number to populate. (count 0 => first number, 1 => second number) \r\n    typeOfClick: '' // Type of click number/operator\r\n}\r\n\r\nclass Calcualtor extends Component {\r\n\r\n    state  = {\r\n        layout : [\r\n            [ {name: 'C', value:'clear', type: 'op', class:[classes.Sign]}, \r\n              {name: '+/-', value:'sign', type: 'op', class:[classes.Sign]}, \r\n              {name: '%', value:'percent', type: 'op', class:[classes.Sign]}, \r\n              {name: '÷', value:'divide', type: 'op', class:[classes.Operation]}],\r\n            [ {name: '7', value: '7', class:[classes.Number]}, \r\n              {name: '8', value: '8', class:[classes.Number]}, \r\n              {name: '9', value: '9', class:[classes.Number]}, \r\n              {name: 'x', value:'multi', type: 'op', class:[classes.Operation]}],\r\n            [ {name: '4', value: '4', class:[classes.Number]}, \r\n              {name: '5', value: '5', class:[classes.Number]}, \r\n              {name: '6', value: '6', class:[classes.Number]}, \r\n              {name: '-', value:'minus', type: 'op', class:[classes.Operation]}],\r\n            [ {name: '1', value: '1', class:[classes.Number]}, \r\n              {name: '2', value: '2', class:[classes.Number]}, \r\n              {name: '3', value: '3', class:[classes.Number]}, \r\n              {name: '+', value:'add', type: 'op', class:[classes.Operation]}],\r\n            [ {name: '0', value: '0', class:[classes.Number, classes.Zero], colspan: 2}, \r\n              {name: '.', value: '.', type: 'dot', class:[classes.Number]}, \r\n              {name: '=', value:'result', type: 'op', class:[classes.Operation]}],\r\n        ],\r\n        params: {...initalState }\r\n      \r\n    }\r\n\r\n    onButtonClick = (rowId, colId) => {      \r\n        const isOperator = this.state.layout[rowId][colId].type === 'op';\r\n        let cellValue = this.state.layout[rowId][colId].value;          \r\n        const { params } = this.state;\r\n           \r\n        //If error force user to clear display\r\n        if(params.display === 'Error' &&  cellValue !== 'clear')\r\n         return;\r\n    \r\n        if(isOperator){                      \r\n            if(!params.isFirstNumber){\r\n                this.setState({params: operate(params, cellValue)}); \r\n            } else if (cellValue === 'sign' || cellValue === 'clear'\r\n                         || cellValue === 'percent' || cellValue === 'dot'){\r\n                this.setState({params: operate(params, cellValue)}); \r\n            } else{\r\n                this.setState({params: {...params, op: cellValue, isFirstNumber: false}});\r\n            } \r\n            return;\r\n        }           \r\n      \r\n        //User cannot enter number more than 15 digit long\r\n        if((params.value1.length >= 15 && params.isFirstNumber)\r\n            || (params.value2.length >= 15 && !params.isFirstNumber)){\r\n            return;\r\n        }\r\n\r\n        if(cellValue === '.'){\r\n            if(params.display.includes('.')) // if number already includes '.' then return           \r\n                return;\r\n            else if (params.display === '' || params.display === '0')\r\n                cellValue = '0.';    \r\n\r\n        }\r\n        \r\n        // if display is 0 and user enters 0 then return \r\n        if(params.display === '0' && cellValue === '0'){ \r\n            return;\r\n        }\r\n        \r\n        if(params.isFirstNumber){  \r\n            const value1 =  params.typeOfClick === 'number' ? params.value1 : '';         \r\n            this.setState({params: { ...params, value1: value1 + cellValue, display: value1 + cellValue, typeOfClick: 'number' }});\r\n        }\r\n\r\n        if(params.isFirstNumber === false){            \r\n            const value2 =  params.typeOfClick === 'number' ? params.value2 : '';         \r\n            this.setState({params: { ...params, value2: value2 + cellValue, display: value2 + cellValue, typeOfClick: 'number' }});  \r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>                \r\n                <table className={classes.Table}>\r\n                    <tbody>\r\n                        <tr>\r\n                            <td colSpan='4'>\r\n                                <Display value={this.state.params.display || '0'}/>  \r\n                            </td>\r\n                        </tr>\r\n                        {this.state.layout.map((row, rowId) => {\r\n                        return <tr key={rowId}>\r\n                                    {row.map((cell, colId) => {\r\n                                        return <td className={classes.Td} colSpan={cell.colspan} key={colId}>\r\n                                                    <Button classes={cell.class.join(' ')} \r\n                                                        click={() => this.onButtonClick(rowId, colId)}\r\n                                                        name={cell.name}></Button>\r\n                                            </td>\r\n                                    })}\r\n                                </tr>  \r\n                        })}\r\n                    </tbody> \r\n                </table>     \r\n            </React.Fragment>            \r\n        )\r\n    }\r\n}\r\n\r\nexport default Calcualtor;","import React from 'react';\nimport './App.css';\nimport Calculator from './Containers/Calculator/Calculator';\n\nfunction App() {\n  return <Calculator/>\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}